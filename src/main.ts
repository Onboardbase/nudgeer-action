import * as core from '@actions/core'
import * as github from '@actions/github'
import { wait } from './wait'
import { HttpClient } from '@actions/http-client'
import { getEmojiForNumber } from './emoji'
/**
 * The main function for the action.
 * @returns {Promise<void>}
 */
export async function run(): Promise<void> {
  try {
    const ms: string = core.getInput('wait')
    const domain: string = core.getInput('domain')
    const GH_TOKEN: string = core.getInput('github_token')
    const octokit = github.getOctokit(GH_TOKEN)

    const ctx = github.context
    const issue_number = ctx.payload.pull_request?.number

    core.debug(`Await ${+ms / 1000}sec till website deploy is live`)
    wait(parseInt(ms, 10))

    core.debug(`Getting your website report ...`)
    const { score, secretsReport } = await getReport(domain)

    core.setOutput('score', `Your website overall score: ${score}\n`)
    core.setOutput('report', secretsReport)

    const outputTable = [
      { data: 'Score', header: true },
      { data: 'Secrets', header: true },
      { data: score.toString() },
      { data: secretsReport }
    ]

    core.info(`Score : ${score}`)
    core.summary.addTable([outputTable])
    core.summary.addLink('Generated by Nudgeer', 'https://nudgeer.com')

    async function createComment({
      owner,
      repo,
      issue_number,
      body
    }: {
      owner: string
      repo: string
      issue_number: number
      body: string
    }) {
      const { data: comment } = await octokit.rest.issues.createComment({
        owner,
        repo,
        issue_number,
        body
      })

      return comment
    }

    const moje = getEmojiForNumber(score)

    if (issue_number)
      await createComment({
        ...ctx.repo,
        issue_number,
        body: `<body>
        <table><tr><td>Score</td><td>Secrets</td></tr><tr><td>${score} ${moje}</td><td>${secretsReport}</td></tr></table></body>

For more detailed report visit [Nudgeer](https://nudgeer.com)`
      })
  } catch (error) {
    if (error instanceof Error) core.setFailed(error.message)
  }
}

async function getReport(
  url: string
): Promise<{ score: number; secretsReport: string }> {
  try {
    const http = new HttpClient('Nudgeer-action')
    const nudgeerURL = 'http://161.35.168.63:8000'
    const payload = JSON.stringify({ url })
    const report = await http.post(`${nudgeerURL}/report`, payload, {
      'content-type': 'application/json'
    })
    const reportJson = JSON.parse(await report.readBody())

    return {
      score: reportJson.total_score,
      secretsReport: reportJson.secrets_report
    }
  } catch (error) {
    console.error('Error fetching report:', error)
    throw error
  }
}
